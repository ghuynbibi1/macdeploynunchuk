name: mac

on:
  push:
    tags:
    - '*'

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-10.15

    steps:
      - name: Checkout
        uses: actions/checkout@v2
 
      - name: Checkout nunchuk-qt
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_AT: ${{ secrets.GITLAB_AT }}
        run: |
          echo -e "machine gitlab.com\n  login bakaoh\n  password $GITLAB_AT" >~/.netrc
          git clone -b online https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt --depth 1
          cd nunchuk-qt
          git submodule update --init --recursive
        
      - name: Install dependencies
        run: |
          brew install automake libtool pkg-config berkeley-db@4 openssl@1.1 boost@1.76 qt@5 libevent sqlite sqlcipher libolm          

      - name: Install qtkeychain
        working-directory: ${{runner.workspace}}
        run: |
          git clone https://github.com/frankosterfeld/qtkeychain
          cd qtkeychain
          mkdir build
          cd build
          cmake .. -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/lib/cmake
          cmake --build .
          sudo cmake --install . --prefix "/usr/local"

      - name: Cache Bitcoin Core
        uses: actions/cache@v2
        id: cache-contrib
        with:
          path: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/bitcoin
          key: mac-a0988140b71485ad12c3c3a4a9573f7c21b1eff8-2

      - name: Build Bitcoin Core
        if: steps.cache-contrib.outputs.cache-hit != 'true'
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/bitcoin
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          ./autogen.sh
          ./configure --enable-module-ecdh --without-gui --disable-zmq --with-miniupnpc=no --with-incompatible-bdb --disable-bench --disable-tests --with-boost-libdir="/usr/local/opt/boost@1.76/lib"
          make -j8

      - name: Build nunchuk-qt
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          mkdir ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/sqlcipher/.libs
          cp /usr/local/lib/libsqlcipher.a ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/sqlcipher/.libs/libsqlcipher.a
          cmake -E make_directory ${{runner.workspace}}/build
          cd build
          cmake ${{runner.workspace}}/nunchuk-qt -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/lib/cmake -DUR__DISABLE_TESTS=ON -DBOOST_ROOT=/usr/local/opt/boost@1.76
          cmake --build . --config Release -j8
          
      - name: Deploy Dmg
        working-directory: ${{runner.workspace}}/build
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          wget -c -q "https://github.com/bitcoin-core/HWI/releases/download/2.1.0/hwi-2.1.0-mac-amd64.tar.gz" -O - | tar -xz
          mv hwi nunchuck-client-qt.app/Contents/MacOS/hwi
          mv nunchuck-client-qt.app/Contents/MacOS/nunchuck-client-qt nunchuck-client-qt.app/Contents/MacOS/Nunchuk
          mv nunchuck-client-qt.app Nunchuk.app
          macdeployqt Nunchuk.app -qmldir=${{runner.workspace}}/nunchuk-qt
      

      - name: Codesign app bundle
        working-directory: ${{runner.workspace}}/build
        # Extract the secrets we defined earlier as environment variables
        env: 
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          PRODUCT_BUNDLE_IDENTIFIER: ${{ secrets.PROD_PRODUCT_BUNDLE_IDENTIFIER }}
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          # Turn our base64-encoded certificate back to a regular .p12 file
          ENTITLEMENTS="${{runner.workspace}}/nunchuk-qt/Info.plist"
          APP_PATH="${{runner.workspace}}/build/Nunchuk.app"

          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          security find-identity -v -p codesigning
          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment
    
          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security find-identity -v -p codesigning
          security default-keychain -s build.keychain
          security find-identity -v -p codesigning
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security find-identity -v -p codesigning
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security find-identity -v -p codesigning
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security find-identity -v -p codesigning

          # We finally codesign our app bundle, specifying the Hardened runtime option
          #macdeployqt Nunchuk.app -qmldir=${{runner.workspace}}/nunchuk-qt -sign-for-notarization="$MACOS_CERTIFICATE_NAME" -----> fail ERROR: codesign verification error
          #codesign --deep --timestamp --options runtime -s "$MACOS_CERTIFICATE_NAME" Nunchuk.app
          #codesign --options runtime -s "$MACOS_CERTIFICATE_NAME"  -f --timestamp --entitlements Nunchuk.app/Contents/Info.plist Nunchuk.app ----> fail
          #/usr/bin/codesign --verify --verbose --sign "$MACOS_CERTIFICATE_NAME" --keychain build.keychain Nunchuk.app ----> fail
          #codesign --force --deep --verbose --timestamp -s "$MACOS_CERTIFICATE_NAME"  -o runtime -i "$PRODUCT_BUNDLE_IDENTIFIER" --entitlements "$ENTITLEMENTS" "$APP_PATH" --------> fail:/Users/runner/work/macdeploynunchuk/build/Nunchuk.app: signed app bundle with Mach-O thin (x86_64) [***]

          if codesign --verbose --timestamp -s "$MACOS_CERTIFICATE_NAME"  -o runtime -i "$PRODUCT_BUNDLE_IDENTIFIER" --entitlements "$ENTITLEMENTS" "$APP_PATH" >&1 | grep -qF "$MACOS_CERTIFICATE_NAME"
          then
            echo "App has been signed successfully by my cert!"
          else
            echo "App is not signed correctly!"
          fi
          echo "Verifying signature for APP: $APP_PATH"
          codesign --verify --verbose --strict "$APP_PATH"

          mkdir nunchuk-mac-qt
          mv Nunchuk.app nunchuk-mac-qt
          zip -r nunchuk-mac-qt.zip nunchuk-mac-qt



      #- name: "Notarize app bundle"
      #  working-directory: ${{runner.workspace}}/build
      #  # Extract the secrets we defined earlier as environment variables
      #  env:
      #    PROD_MACOS_NOTARIZATION_APPLE_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_APPLE_ID }}
      #    PROD_MACOS_NOTARIZATION_TEAM_ID: ${{ secrets.PROD_MACOS_NOTARIZATION_TEAM_ID }}
      #    PROD_MACOS_NOTARIZATION_PWD: ${{ secrets.PROD_MACOS_NOTARIZATION_PWD }}
      #  run: |
      #    # Store the notarization credentials so that we can prevent a UI password dialog
      #    # from blocking the CI
#
#      #    echo "Create keychain profile"
#      #    xcrun notarytool store-credentials "notarytool-profile" --apple-id "$PROD_MACOS_NOTARIZATION_APPLE_ID" --team-id "$PROD_MACOS_NOTARIZATION_TEAM_ID" --password "$PROD_MACOS_NOTARIZATION_PWD"
#
#      #    # We can't notarize an app bundle directly, but we need to compress it as an archive.
#      #    # Therefore, we create a zip file containing our app bundle, so that we can send it to the
#      #    # notarization service
#
#      #    echo "Creating temp notarization archive"
#      #    ditto -c -k --keepParent "target/mac/Espanso.app" "notarization.zip"
#
#      #    # Here we send the notarization request to the Apple's Notarization service, waiting for the result.
#      #    # This typically takes a few seconds inside a CI environment, but it might take more depending on the App
#      #    # characteristics. Visit the Notarization docs for more information and strategies on how to optimize it if
#      #    # you're curious
#
#      #    echo "Notarize app"
#      #    xcrun notarytool submit "notarization.zip" --keychain-profile "notarytool-profile" --wait
#
#      #    # Finally, we need to "attach the staple" to our executable, which will allow our app to be
#      #    # validated by macOS even when an internet connection is not available.
#      #    echo "Attach staple"
      #    xcrun stapler staple "target/mac/Espanso.app"
      
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Upload Artifact
        uses: 'actions/upload-artifact@v2'
        with:
          name: nunchuk-mac-${{ steps.get_version.outputs.VERSION }}
          path: ${{runner.workspace}}/build/nunchuk-mac-qt.zip
