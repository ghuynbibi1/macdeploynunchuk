name: 2-mac-sign-mix-x86-64-finney

on:
  push:
    tags:
    - '*'

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-11

    steps:
      - name: Checkout
        uses: actions/checkout@v2
    
      - name: Build HWI
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          brew install libusb pyenv pyenv-virtualenv
          pyenv install 3.9.7
          pyenv global 3.9.7
          eval "$(pyenv init -)"
          eval "$(pyenv init --path)"
          wget -c -q "https://github.com/bitcoin-core/HWI/archive/refs/tags/2.4.0.zip" -O - | tar -xz
          cd HWI-2.4.0
          pip3 install poetry
          poetry install
          pip3 install .
          pip3 install -U setuptools
          bash contrib/build_bin.sh --without-gui
          echo "find hwi"
          find ${{runner.workspace}} -name "hwi-2.4.0-mac-x86_64.tar.gz"
      
      - name: Install dependencies
        run: |
          brew unlink glib
          cd /usr/local/Homebrew/Library/Taps/homebrew/homebrew-core/Formula
          git stash
          git checkout 8264919fc5b75b989d8371f15508022f15921aaf
          export HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK=1
          export HOMEBREW_NO_AUTO_UPDATE=1
          brew install qt@5.rb
          brew install glib.rb
          brew install automake libtool pkg-config berkeley-db@4 openssl@1.1 boost@1.76 libevent sqlite sqlcipher libolm
          
          # brew install automake libtool pkg-config berkeley-db@4 openssl@1.1 boost@1.76 qt@5 libevent sqlite sqlcipher libolm
          # workaround for Homebrew RPATH issue https://github.com/Homebrew/homebrew-core/issues/140930
          # brew update && brew reinstall qt@5 glib freetype

      - name: Install qtkeychain
        working-directory: ${{runner.workspace}}
        run: |
          git clone https://github.com/frankosterfeld/qtkeychain
          cd qtkeychain
          mkdir build
          cd build
          cmake .. -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/lib/cmake
          cmake --build .
          sudo cmake --install . --prefix "/usr/local"

      - name: Checkout nunchuk-qt
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_PASS: ${{ secrets.GITLAB_PASS }}
        run: |
          echo -e "machine gitlab.com\n  login hadvluffy\n  password $GITLAB_PASS" >~/.netrc
          git clone -b online https://gitlab.com/nunchuck/nunchuck-qt nunchuk-qt --depth 1
          cd nunchuk-qt
          git submodule update --init --recursive

      - name: Cache Bitcoin Core
        uses: actions/cache@v2
        id: cache-contrib
        with:
          path: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/bitcoin
          key: mac-a0988140b71485ad12c3c3a4a9573f7c21b1eff8-2

      - name: Build Bitcoin Core
        if: steps.cache-contrib.outputs.cache-hit != 'true'
        working-directory: ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/bitcoin
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          ./autogen.sh
          ./configure --enable-module-ecdh --without-gui --disable-zmq --with-miniupnpc=no --with-incompatible-bdb --disable-bench --disable-tests --with-boost-libdir="/usr/local/opt/boost@1.76/lib"
          make -j8

      - name: Build nunchuk-qt
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          mkdir ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/sqlcipher/.libs
          cp /usr/local/lib/libsqlcipher.a ${{runner.workspace}}/nunchuk-qt/contrib/libnunchuk/contrib/sqlcipher/.libs/libsqlcipher.a
          cmake -E make_directory ${{runner.workspace}}/build
          cd build
          cmake ${{runner.workspace}}/nunchuk-qt -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/lib/cmake -DUR__DISABLE_TESTS=ON -DBOOST_ROOT=/usr/local/opt/boost@1.76
          cmake --build . --config Release -j8
          
      - name: Deploy Dmg
        working-directory: ${{runner.workspace}}/build
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          mv ${{runner.workspace}}/HWI-2.4.0/dist/hwi-2.4.0-mac-x86_64.tar.gz .
          tar -xf hwi-2.4.0-mac-x86_64.tar.gz
          #wget -c -q "https://github.com/bitcoin-core/HWI/releases/download/2.3.1/hwi-2.3.1-mac-x86_64.tar.gz" -O - | tar -xz
          find ${{runner.workspace}} -name "hwi"
          find ${{runner.workspace}} -name "nunchuk-qt.app"
          
          mv hwi nunchuk-qt.app/Contents/MacOS/hwi
          mv nunchuk-qt.app/Contents/MacOS/nunchuk-qt nunchuk-qt.app/Contents/MacOS/Nunchuk
          mv nunchuk-qt.app Nunchuk.app
          find ${{runner.workspace}} -name "Nunchuk.app"
          find ${{runner.workspace}}/build -name "Nunchuk.app"
          ls
          macdeployqt Nunchuk.app -qmldir=${{runner.workspace}}/nunchuk-qt

          mkdir nunchuk-mac-qt
          mv Nunchuk.app nunchuk-mac-qt
          zip -r nunchuk-mac-qt.zip nunchuk-mac-qt
     
      
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Upload Artifact
        uses: 'actions/upload-artifact@v2'
        with:
          name: nunchuk-mac-${{ steps.get_version.outputs.VERSION }}
          path: ${{runner.workspace}}/build/nunchuk-mac-qt.zip
