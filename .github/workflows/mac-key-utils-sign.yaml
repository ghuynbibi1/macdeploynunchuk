name: mac-key-utils-sign

on:
  push:
    tags:
    - '*'

  workflow_dispatch:

jobs:
  build:
    runs-on: macos-10.15

    steps:
      - name: Checkout
        uses: actions/checkout@v2
 
      - name: Checkout key-utils
        working-directory: ${{runner.workspace}}
        env:
          GITLAB_AT: ${{ secrets.GITLAB_AT }}
        run: |
          echo -e "machine github.com\n  login hadvluffy\n  password $GITLAB_AT" >~/.netrc
          git clone -b main https://github.com/hadvluffy/key-utils key-utils --depth 1
          cd key-utils
          git submodule update --init --recursive
        
      - name: Install dependencies
        run: |
          brew install automake libtool pkg-config berkeley-db@4 openssl@1.1 boost@1.76 qt@5 libevent sqlite sqlcipher libolm          

      - name: Install qtkeychain
        working-directory: ${{runner.workspace}}
        run: |
          git clone https://github.com/frankosterfeld/qtkeychain
          cd qtkeychain
          mkdir build
          cd build
          cmake .. -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/lib/cmake
          cmake --build .
          sudo cmake --install . --prefix "/usr/local"

      - name: Build key-utils
        working-directory: ${{runner.workspace}}
        shell: bash
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"

          cmake -E make_directory ${{runner.workspace}}/build
          cd build
          cmake ${{runner.workspace}}/key-utils -DCMAKE_BUILD_TYPE=Release -DOPENSSL_ROOT_DIR=/usr/local/opt/openssl -DCMAKE_PREFIX_PATH=/usr/local/opt/qt@5/lib/cmake -DUR__DISABLE_TESTS=ON -DBOOST_ROOT=/usr/local/opt/boost@1.76
          cmake --build . --config Release -j8
          
      - name: Deploy Dmg
        working-directory: ${{runner.workspace}}/build
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"

          #mv key-utils.app/Contents/MacOS/key-utils key-utils.app/Contents/MacOS/tapsigner
          #mv key-utils.app tapsigner.app
         

          #macdeployqt key-utils.app -qmldir=${{runner.workspace}}/key-utils


      - name: Codesign app bundle
        working-directory: ${{runner.workspace}}/build
        # Extract the secrets we defined earlier as environment variables
        env: 
          MACOS_CERTIFICATE: ${{ secrets.PROD_MACOS_CERTIFICATE }}
          MACOS_CERTIFICATE_PWD: ${{ secrets.PROD_MACOS_CERTIFICATE_PWD }}
          MACOS_CERTIFICATE_NAME: ${{ secrets.PROD_MACOS_CERTIFICATE_NAME }}
          MACOS_CI_KEYCHAIN_PWD: ${{ secrets.PROD_MACOS_CI_KEYCHAIN_PWD }}
          BUNDLE_IDENTIFIER: ${{ secrets.IO_BUNDLE_IDENTIFIER }}
          TEAMID_BUNDLE_IDENTIFIER: ${{ secrets.IO_TEAMID_BUNDLE_IDENTIFIER }}
          APP: "key-utils"
          ENTITLEMENTS: "${{runner.workspace}}/build/key-utils.app/Contents/Info.plist"
          APP_PATH: "${{runner.workspace}}/build/key-utils.app"
          FRAMEWORKS_PATH: "$APP_PATH/Contents/Frameworks"
          PLUGINS_PATH: "$APP_PATH/Contents/PlugIns"
        run: |
          export PATH="/usr/local/opt/qt@5/bin:$PATH"
          export LDFLAGS="$LDFLAGS -L/usr/local/opt/qt@5/lib -L/usr/local/opt/boost@1.76/lib -L/usr/local/opt/berkeley-db@4/lib -L/usr/local/Cellar/sqlcipher/4.5.1/lib"
          export CPPFLAGS="$CPPFLAGS -I/usr/local/opt/qt@5/include -I/usr/local/opt/boost@1.76/include -I/usr/local/opt/berkeley-db@4/include -I/usr/local/Cellar/sqlcipher/4.5.1/include"
          export BOOST_ROOT="/usr/local/opt/boost@1.76"
          # Turn our base64-encoded certificate back to a regular .p12 file
          
          echo $MACOS_CERTIFICATE | base64 --decode > certificate.p12
          # We need to create a new keychain, otherwise using the certificate will prompt
          # with a UI dialog asking for the certificate password, which we can't
          # use in a headless CI environment

          security create-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain 
          security default-keychain -s build.keychain
          security unlock-keychain -p "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security import certificate.p12 -k build.keychain -P "$MACOS_CERTIFICATE_PWD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$MACOS_CI_KEYCHAIN_PWD" build.keychain
          security find-identity -v -p codesigning

          #way 4 ========================================================================================================================================================
          macdeployqt key-utils.app -qmldir=${{runner.workspace}}/key-utils
          spctl -a -t exec -vv key-utils.app

          #sign all *.dylib
          find "$APP_PATH" -name *.dylib | xargs -I $ codesign  --sign "$MACOS_CERTIFICATE_NAME" $

          #sign Qt frameworks
          find "$APP_PATH" -name Qt* -type f | xargs -I $ codesign  --sign "$MACOS_CERTIFICATE_NAME" $

          #sign app
          codesign  --sign "$MACOS_CERTIFICATE_NAME" "$APP_PATH"

          #macdeployqt key-utils.app -codesign="$MACOS_CERTIFICATE_NAME" -qmldir=${{runner.workspace}}/key-utils 

          #codesign --verify --verbose=4 --deep --strict "$APP_PATH"
          codesign -dvvv "$APP_PATH"

          #spctl --verbose --assess --type execute key-utils.app


          #macdeployqt key-utils.app -sign-for-notarization=$MACOS_CERTIFICATE_NAME -qmldir=${{runner.workspace}}/key-utils -dmg
          #codesign --force -s "$MACOS_CERTIFICATE_NAME" --options runtime key-utils.dmg -v

          mkdir utils-mac-qt
          mv key-utils.app utils-mac-qt
          zip -r key-utils.zip utils-mac-qt
          
      - name: Get the version
        id: get_version
        run: echo ::set-output name=VERSION::$(echo $GITHUB_REF | cut -d / -f 3)

      - name: Upload Artifact
        uses: 'actions/upload-artifact@v2'
        with:
          name: key-utils-mac-${{ steps.get_version.outputs.VERSION }}
          path: ${{runner.workspace}}/build/key-utils.zip
